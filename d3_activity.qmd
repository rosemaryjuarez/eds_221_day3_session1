---
title: "day3 interactive"
format: html
editor: visual
execute: 
  echo: true
  warning: false
---

```{r}
library(tidyverse)
```

```{r}
penguins = palmerpenguins::penguins
```

## Conditional statement

```{r}
temperature <- 98.2

if(temperature > 97) {
  print("Temperature Warning")
} else 
  print("No temperature warning")
```

### Create an if else statement for blue whale lengths. Create a variable blue whale, which has a value of 40 meters. Add an if else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<= 20

```{r}
blue_whale <- 15

if(blue_whale > 35){
  print("GIANT")
} else if(blue_whale >= 20 & blue_whale <= 35){
  print("MEDIUM")
  } else if(blue_whale <= 20){
  print("SMALL")}
```

### Switch statement

```{r}
housing_type <- "whole"

# Based on that value I will do different things

switch (housing_type,
  "single"= print("400"),
  "double" = print("750"),
  "whole" = print("1100")
)

# If else statement 

if (housing_type == "single"){
  print("400")
} else if (housing_type == "double"){
  print("750")
} else if (housing_type == "whole"){
  print("1100")
}
```

\## For Loops

```{r}
height <- c(58,61,65,72,89,94)

#Iterate over each of these and divide the values in half

for (i in seq_along(height)){

  half_height = height[i]/2

  print(half_height)

}

## For each value in the height vector return the sum of the value + the other right after it 

for(i in seq_along(height)){

  j = i + 1

  sum_height = height[i] + height[j]

  print(sum_height)

}

## Or

for(i in seq_along(height)){

  sum_height = height[i] + height[i+1]

  print(sum_height)

}

## It'll be better to write a sequence to end -1 

for(i in seq(1:(length(height)-1))){

  sum_height = height[i] + height[i+1]

  print(sum_height)

}

## Write a for loop that calculates the value of height / mean of the entire height vector

for(i in seq_along(height)){

  standardize_height = height[i]/mean(height)

  print(standardize_height)

}
```

12334556

```{r}
# how to find the mean within columns in penguins
for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
    penguin_mean <- mean(penguins[[i]], na.rm = TRUE)
    print(penguin_mean)
  } else {
    print("non-numeric")
  }
}
```

```{r}
apply(mtcars, 2, mean, na.rm = TRUE)

```

# Functional programming for easier iteration

Use apply() to iterate over rows or column. Margins = 1(rows), MARGINS = 2(columns)

```{r}
# if you want to use it with argument that is visible:
apply(X = mtcars, MARGIN = 2, FUN = median)

# or without arguments visible

apply(mtcars, 2, median)
```

```{r}
penguins
```

## dplyr::across()

starter: find the mean flipper length of penguins by species

```{r}
penguins %>% 
  group_by(species, sex, island) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE)) #summarize by group, and will give you the results


```

```{r}
penguins %>% 
  group_by(species, island) %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

# Detecting a string patterns

```{r}
food <- 'I love Enchiladas'


if (str_detect(food, 'burritos')) {
  print('yay burritos!')
} else {
    print('what about burritos?')
  }
```
